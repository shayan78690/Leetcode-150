class Solution {
    public boolean wordPattern(String pattern, String s) {
        String words[] = s.split(" ");
        HashMap<Character, String> map = new HashMap<>();
        // HashMap<String, Character> map2 = new HashMap<>();
        if (pattern.length() != words.length)
            return false;

        for (int i = 0; i < words.length; i++) {
            char ch = pattern.charAt(i);
            String str = words[i];
            if (map.containsKey(ch)) {
                if (!map.get(ch).equals(str)) {
                    return false;
                }
            } else {
                if (map.containsValue(str)) {
                    return false;
                }
                map.put(ch, str);
            }
        }
        return true;
    }
}







class Solution {
    public boolean wordPattern(String pattern, String s) {
        String words[] = s.split(" ");
        HashMap<Character, String> map1 = new HashMap<>();
        HashMap<String, Character> map2 = new HashMap<>();
        if (pattern.length() != words.length)
            return false;

        for (int i = 0; i < pattern.length(); i++) {
            char ch = pattern.charAt(i);
            String str = words[i];
            if ((map1.containsKey(ch) && !map1.get(ch).equals(str)) || (map2.containsKey(str) && map2.get(str) != ch)) {
                return false;
            } else {
                map1.put(ch, str);
                map2.put(str, ch);
            }
        }
        return true;
    }
}
